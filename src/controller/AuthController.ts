import axios from "axios";
import { Request, Response } from "express";
import { AuthRequest } from "../@types/globalTypes";
import {
    BadRequestError,
    InternalServerError
} from "../middleware/helper/ApiError";
import { AuthServices } from "../service/AuthServices";
const { sign } = require("jsonwebtoken");

const authServices = new AuthServices();

export class AuthController {
    /**
     * Handles the redirect from Discord login and performs the necessary steps to authenticate the user. If the user is new, it will save the user to the database. If the user is already in the database, it will update the user's information.
     * It will require the code provided by Discord to get the access token, this one coming from the redirect. It will then use the access token to get the user's information.
     *
     * @param req - The request object.
     * @param res - The response object.
     * @returns The proper information to authenticate the user; The user's ID, the user's auth token (generated by this API), the user's refresh token (provided by Discord) and a success message.
     * @throws {BadRequestError} if no code is provided.
     */
    async discordLoginRedirect(req: Request, res: Response): Promise<Response> {
        const { code } = req.query;

        if (!code) throw new BadRequestError("No code provided.");

        const accessTokenResponse = await authServices.discordLoginRedirect(
            code.toString()
        );

        const userDataResponse =
            await authServices.discordLoginSaveUserToDatabase(
                accessTokenResponse.access_token
            );

        const userAuthToken = await sign(
            {
                discordId: userDataResponse.discordId
            },
            process.env.JWT_SECRET_KEY,
            {
                expiresIn: "1d"
            }
        );

        return res.status(200).json({
            id: userDataResponse.id,
            authToken: userAuthToken,
            refreshToken: accessTokenResponse.refresh_token,
            message: "You have successfully logged in!"
        });
    }

    /**
     * Logs out the user from Discord by revoking the refresh token.
     * Clears the authentication cookies and returns a success message. It will require the refresh token provided by Discord, which is stored in a cookie by the client.
     *
     * @todo Remove the cookie request, and instead, require the
     * refresh token to be provided in the request body. And make the cookie deletion be of the client's responsibility.
     *
     * @param req - The request object.
     * @param res - The response object.
     * @returns The success logout message only.
     * @throws {BadRequestError} if no refresh token is provided.
     * @throws {Error} if there is an error revoking the token or if the response is not successful.
     * @throws {InternalServerError} if something goes wrong.
     */
    async discordLogout(req: AuthRequest, res: Response): Promise<Response> {
        const refreshTokenCookie = req.cookies?.refreshToken;
        if (!refreshTokenCookie)
            throw new BadRequestError("No refresh token provided.");

        try {
            await axios.post(
                "https://discord.com/api/v10/oauth2/token/revoke",
                {
                    token: refreshTokenCookie,
                    token_type_hint: "refresh_token"
                },
                {
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    auth: {
                        username: process.env.DISCORD_CLIENT_ID ?? "",
                        password: process.env.DISCORD_CLIENT_SECRET ?? ""
                    }
                }
            );
        } catch (error) {
            if (axios.isAxiosError(error) && error.response)
                throw new Error(error.response.data.message);
            throw new InternalServerError("Something went wrong.");
        }

        res.clearCookie("authToken");
        res.clearCookie("refreshToken");
        res.clearCookie("userData");
        res.clearCookie("userId");

        return res
            .status(200)
            .json({ message: "You have successfully logged out!" });
    }
}
